{"version":3,"sources":["scripts/main.js"],"names":["currentTarget","direction","table","document","querySelector","userList","sortByTarget","key","cellIndex","a","b","x","normalize","textContent","y","localeCompare","element","test","parseInt","replace","tHead","addEventListener","e","target","closest","append","rows","sort"],"mappings":";AAAA,aA0CC,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAxCD,IAEIA,EACAC,EAHEC,EAAQC,SAASC,cAAc,SAC/BC,EAAWF,SAASC,cAAc,SAgBxC,SAASE,EAAaC,EAAoB,GAAbC,IAAAA,EAAAA,EAAAA,UAGpB,OAFPP,EAAYA,EAAY,EAAI,EAErB,SAACQ,EAAGC,GACHC,IAAAA,EAAIC,EAAUH,EAAEF,GAAKC,GAAWK,aAChCC,EAAIF,EAAUF,EAAEH,GAAKC,GAAWK,aAElC,MAAa,iBAANF,EACDV,EACJU,EAAEI,cAAcD,GAChBA,EAAEC,cAAcJ,GAGdV,EACJU,EAAIG,EACJA,EAAIH,GAIZ,SAASC,EAAUI,GACV,MAAA,QAAQC,KAAKD,GAChBE,SAASF,EAAQG,QAAQ,QAAS,KAClCH,EAlCNd,EAAMkB,MAAMC,iBAAiB,QAAS,SAACC,GAC/BC,IAAAA,EAASD,EAAEC,OAAOC,QAAQ,MAE5BD,IAAWvB,IACbA,EAAgBuB,EAChBtB,EAAY,GAGdI,EAASoB,OAATpB,MAAAA,EAAmB,EAAA,EAAIA,EAASqB,MAC7BC,KAAKrB,EAAa,QAASiB","file":"main.e7f6e7d5.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst table = document.querySelector('table');\nconst userList = document.querySelector('tbody');\nlet currentTarget;\nlet direction;\n\ntable.tHead.addEventListener('click', (e) => {\n  const target = e.target.closest('th');\n\n  if (target !== currentTarget) {\n    currentTarget = target;\n    direction = 0;\n  }\n\n  userList.append(...[...userList.rows]\n    .sort(sortByTarget('cells', target)));\n});\n\nfunction sortByTarget(key, { cellIndex }) {\n  direction = direction ? 0 : 1;\n\n  return (a, b) => {\n    const x = normalize(a[key][cellIndex].textContent);\n    const y = normalize(b[key][cellIndex].textContent);\n\n    if (typeof x !== 'number') {\n      return (direction)\n        ? x.localeCompare(y)\n        : y.localeCompare(x);\n    }\n\n    return (direction)\n      ? x - y\n      : y - x;\n  };\n}\n\nfunction normalize(element) {\n  return /[$,]/g.test(element)\n    ? parseInt(element.replace(/[$,]/g, ''))\n    : element;\n}\n"]}